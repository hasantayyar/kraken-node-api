{"version":3,"sources":["../kraken.js"],"names":["got","require","crypto","qs","methods","public","private","defaults","url","version","timeout","getMessageSignature","path","request","secret","nonce","message","stringify","secret_buffer","Buffer","hash","createHash","hmac","createHmac","hash_digest","update","digest","hmac_digest","rawRequest","headers","data","options","Object","assign","method","body","response","JSON","parse","error","length","filter","e","startsWith","map","substr","Error","join","KrakenClient","key","otp","config","params","callback","includes","publicMethod","privateMethod","then","result","catch","Date","undefined","signature","module","exports"],"mappings":"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","file":"kraken.js","sourcesContent":["const got    = require('got');\nconst crypto = require('crypto');\nconst qs     = require('qs');\n\n// Public/Private method names\nconst methods = {\n\tpublic  : [ 'Time', 'Assets', 'AssetPairs', 'Ticker', 'Depth', 'Trades', 'Spread', 'OHLC' ],\n\tprivate : [ 'Balance', 'TradeBalance', 'OpenOrders', 'ClosedOrders', 'QueryOrders', 'TradesHistory', 'QueryTrades', 'OpenPositions', 'Ledgers', 'QueryLedgers', 'TradeVolume', 'AddOrder', 'CancelOrder', 'DepositMethods', 'DepositAddresses', 'DepositStatus', 'WithdrawInfo', 'Withdraw', 'WithdrawStatus', 'WithdrawCancel' ],\n};\n\n// Default options\nconst defaults = {\n\turl     : 'https://api.kraken.com',\n\tversion : 0,\n\ttimeout : 5000,\n};\n\n// Create a signature for a request\nconst getMessageSignature = (path, request, secret, nonce) => {\n\tconst message       = qs.stringify(request);\n\tconst secret_buffer = new Buffer(secret, 'base64');\n\tconst hash          = new crypto.createHash('sha256');\n\tconst hmac          = new crypto.createHmac('sha512', secret_buffer);\n\tconst hash_digest   = hash.update(nonce + message).digest('binary');\n\tconst hmac_digest   = hmac.update(path + hash_digest, 'binary').digest('base64');\n\n\treturn hmac_digest;\n};\n\n// Send an API request\nconst rawRequest = async (url, headers, data, timeout) => {\n\t// Set custom User-Agent string\n\theaders['User-Agent'] = 'Kraken Javascript API Client';\n\n\tconst options = { headers, timeout };\n\n\tObject.assign(options, {\n\t\tmethod : 'POST',\n\t\tbody   : qs.stringify(data),\n\t});\n\n\tconst { body } = await got(url, options);\n\tconst response = JSON.parse(body);\n\n\tif(response.error && response.error.length) {\n\t\tconst error = response.error\n\t\t\t.filter((e) => e.startsWith('E'))\n\t\t\t.map((e) => e.substr(1));\n\n\t\tif(!error.length) {\n\t\t\tthrow new Error(\"Kraken API returned an unknown error\");\n\t\t}\n\n\t\tthrow new Error(error.join(', '));\n\t}\n\n\treturn response;\n};\n\n/**\n * KrakenClient connects to the Kraken.com API\n * @param {String}        key               API Key\n * @param {String}        secret            API Secret\n * @param {String|Object} [options={}]      Additional options. If a string is passed, will default to just setting `options.otp`.\n * @param {String}        [options.otp]     Two-factor password (optional) (also, doesn't work)\n * @param {Number}        [options.timeout] Maximum timeout (in milliseconds) for all API-calls (passed to `request`)\n */\nclass KrakenClient {\n\tconstructor(key, secret, options) {\n\t\t// Allow passing the OTP as the third argument for backwards compatibility\n\t\tif(typeof options === 'string') {\n\t\t\toptions = { otp : options };\n\t\t}\n\n\t\tthis.config = Object.assign({ key, secret }, defaults, options);\n\t}\n\n\t/**\n\t * This method makes a public or private API request.\n\t * @param  {String}   method   The API method (public or private)\n\t * @param  {Object}   params   Arguments to pass to the api call\n\t * @param  {Function} callback A callback function to be executed when the request is complete\n\t * @return {Object}            The request object\n\t */\n\tapi(method, params, callback) {\n\t\t// Default params to empty object\n\t\tif(typeof params === 'function') {\n\t\t\tcallback = params;\n\t\t\tparams   = {};\n\t\t}\n\n\t\tif(methods.public.includes(method)) {\n\t\t\treturn this.publicMethod(method, params, callback);\n\t\t}\n\t\telse if(methods.private.includes(method)) {\n\t\t\treturn this.privateMethod(method, params, callback);\n\t\t}\n\t\telse {\n\t\t\tthrow new Error(method + ' is not a valid API method.');\n\t\t}\n\t}\n\n\t/**\n\t * This method makes a public API request.\n\t * @param  {String}   method   The API method (public or private)\n\t * @param  {Object}   params   Arguments to pass to the api call\n\t * @param  {Function} callback A callback function to be executed when the request is complete\n\t * @return {Object}            The request object\n\t */\n\tpublicMethod(method, params, callback) {\n\t\tparams = params || {};\n\n\t\t// Default params to empty object\n\t\tif(typeof params === 'function') {\n\t\t\tcallback = params;\n\t\t\tparams   = {};\n\t\t}\n\n\t\tconst path     = '/' + this.config.version + '/public/' + method;\n\t\tconst url      = this.config.url + path;\n\t\tconst response = rawRequest(url, {}, params, this.config.timeout);\n\n\t\tif(typeof callback === 'function') {\n\t\t\tresponse\n\t\t\t\t.then((result) => callback(null, result))\n\t\t\t\t.catch((error) => callback(error, null));\n\t\t}\n\n\t\treturn response;\n\t}\n\n\t/**\n\t * This method makes a private API request.\n\t * @param  {String}   method   The API method (public or private)\n\t * @param  {Object}   params   Arguments to pass to the api call\n\t * @param  {Function} callback A callback function to be executed when the request is complete\n\t * @return {Object}            The request object\n\t */\n\tprivateMethod(method, params, callback) {\n\t\tparams = params || {};\n\n\t\t// Default params to empty object\n\t\tif(typeof params === 'function') {\n\t\t\tcallback = params;\n\t\t\tparams   = {};\n\t\t}\n\n\t\tconst path = '/' + this.config.version + '/private/' + method;\n\t\tconst url  = this.config.url + path;\n\n\t\tif(!params.nonce) {\n\t\t\tparams.nonce = new Date() * 1000; // spoof microsecond\n\t\t}\n\n\t\tif(this.config.otp !== undefined) {\n\t\t\tparams.otp = this.config.otp;\n\t\t}\n\n\t\tconst signature = getMessageSignature(\n\t\t\tpath,\n\t\t\tparams,\n\t\t\tthis.config.secret,\n\t\t\tparams.nonce\n\t\t);\n\n\t\tconst headers = {\n\t\t\t'API-Key'  : this.config.key,\n\t\t\t'API-Sign' : signature,\n\t\t};\n\n\t\tconst response = rawRequest(url, headers, params, this.config.timeout);\n\n\t\tif(typeof callback === 'function') {\n\t\t\tresponse\n\t\t\t\t.then((result) => callback(null, result))\n\t\t\t\t.catch((error) => callback(error, null));\n\t\t}\n\n\t\treturn response;\n\t}\n}\n\nmodule.exports = KrakenClient;\n"]}